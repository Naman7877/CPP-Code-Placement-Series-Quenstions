// using in inorder traversal
// using prev node and current and check always prev node data always less than curr node 


void inorder(Node *root,vector<int>& s)
    {
        if (root != NULL)
        {
           if(root->left!=NULL)
           {
            inorder(root->left,s);
           }
           
            s.push_back(root->data);
           
           if(root->right!=NULL)
           {
            inorder(root->right,s);
           }
        }
    }
    Node* prev=NULL;
    bool isBST(Node* root) 
    {
        /*vector<int>s;
        vector<int>m;
        inorder(root,s);
        m=s;
        sort(m.begin(),m.end());
        if(m==s)
        {
            return 1;
        }
        return 0;
        */
        
        
        
        
        
        // time complexity O(n);
        if(root!=NULL)
        {
            if(!isBST(root->left))
            {
                return false;
            }
            
            if(prev!=NULL && root->data<=prev->data)
            {
                return false;
            }
            prev=root;
            
            return isBST(root->right);
        }
        return true;
    }
